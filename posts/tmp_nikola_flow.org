* index.html output
  nikola build -> nikola shell -> __main__.py -> Nikola(site).init_plugin  -> NikolaDoit.run -> all plugin which category is task  run -> the is a task named RenderTaxonomies which gen index, feed, category ->  finially nikola.py -> generic_index_renderer -> generic_post_list_renderer -> generic_render which
#+BEGIN_SRC python
        task = {
            'name': os.path.normpath(output_name),
            'targets': [output_name],
            'file_dep': file_deps,
            'actions': [(self.render_template, [template_name, output_name,
                                                context, url_type, is_fragment])],
            'clean': True,
            'uptodate': [config_changed(deps_dict, 'nikola.nikola.Nikola.generic_renderer')] + ([] if uptodate_deps is None else uptodate_deps)
        }
#+END_SRC
  

  

* how tmpl render and where is the data

  
* plugin tasks
status
default_config
import_wordpress
new_post
console
version
check
subtheme
github_deploy
new_page
init
theme
plugin
serve
deploy
rst2html
orphans
auto

* all task in cmd build
['render_pages', 'render_pages:output/posts/path_to_post/index.html', 
'redirect', 'copy_files', 'copy_files:output/favicon.ico', 'copy_files:output/images/nikola.png', 'render_listings', 'render_listings:output/listings/index.html', 'render_listings:output/listings/hello.py.html', 'render_listings:output/listings/hello.py', 'render_listings:output/listings/__pycache__/index.html', 'render_galleries', 'render_galleries:output/galleries', 'render_galleries:output/galleries/demo', 'render_galleries:output/galleries/index.html', 'render_galleries:output/galleries/rss.xml', 'render_galleries:output/galleries/demo/tesla_lightning1_lg.thumbnail.jpg', 'render_galleries:output/galleries/demo/tesla_lightning1_lg.jpg', 'render_galleries:output/galleries/demo/tesla_conducts_lg.thumbnail.jpg', 'render_galleries:output/galleries/demo/tesla_conducts_lg.jpg', 'render_galleries:output/galleries/demo/tesla_lightning2_lg.thumbnail.jpg', 'render_galleries:output/galleries/demo/tesla_lightning2_lg.jpg', 'render_galleries:output/galleries/demo/tesla_tower1_lg.thumbnail.jpg', 'render_galleries:output/galleries/demo/tesla_tower1_lg.jpg', 'render_galleries:output/galleries/demo/tesla4_lg.thumbnail.jpg', 'render_galleries:output/galleries/demo/tesla4_lg.jpg', '_render_galleries_clean', '_render_galleries_clean:output/galleries/demo/tesla2_lg.thumbnail.jpg', '_render_galleries_clean:output/galleries/demo/tesla2_lg.jpg', 'render_galleries:cache/galleries/demo/index.html', 'render_galleries:output/galleries/demo/index.html', 'render_galleries:output/galleries/demo/rss.xml', 'render_sources', 'render_sources:output/posts/tmp_nikola_flow/index.org', 'render_sources:output/posts/git/notes_git/index.org', 'render_sources:output/posts/intro_repo/index.org', 

'render_sources:output/posts/py_doit/index.org', 'render_sources:output/posts/android/version/index.org', 'render_sources:output/posts/latlon/index.org', 'render_sources:output/posts/uncheck/梦幻西游 登录分析/index.org', 'render_sources:output/posts/mh/mh-snnipt/index.org', 'render_sources:output/posts/libs/index.org', 

'scale_images', 'scale_images:output/images/sanyue2.jpg', 'scale_images:output/images/sanyue3.jpg', 'scale_images:output/images/sanyue1.png', 'scale_images:output/images/wikipedia_crt.png', 'scale_images:output/images/runningMan.png', 'scale_images:output/images/sanyue4.png', 'scale_images:output/images/1dc8.png', 'scale_images:output/images/基于EBP的栈帧.png', 'scale_images:output/images/mvp.png', 'scale_images:output/images/elf_file_format.png', 'render_posts', 'render_posts:timeline_changes', 'render_posts:cache/posts/tmp_nikola_flow.html', 'render_posts:cache/posts/git/notes_git.html', 'render_posts:cache/posts/intro_repo.html', 'render_posts:cache/posts/py_doit.html', 'render_posts:cache/posts/android/version.html', 'render_posts:cache/posts/latlon.html', 'render_posts:cache/posts/uncheck/mh-login-analysis.html', 'render_posts:cache/posts/mh/mh-snnipt.html', 'render_posts:cache/posts/libs.html', 

'render_taxonomies', 'render_taxonomies:output/2018/index.html', 'render_taxonomies:output/archive.html', 'render_taxonomies:output/categories/cat_meng-huan-xi-you.xml', 'render_taxonomies:output/categories/cat_meng-huan-xi-you/index.html', 'render_taxonomies:output/rss.xml', 'render_taxonomies:output/index.html', 'render_taxonomies:output/categories/index.html',

 'copy_assets', 'copy_assets:output/assets/css/bootblog.css', 'copy_assets:output/assets/css/bootstrap.min.css', 'copy_assets:output/assets/css/theme.css', 'copy_assets:output/assets/js/jquery.min.js', 'copy_assets:output/assets/js/bootstrap.min.js', 'copy_assets:output/assets/js/popper.min.js', 'copy_assets:output/assets/css/nikola_rst.css', 'copy_assets:output/assets/css/nikola_ipython.css', 'copy_assets:output/assets/css/html4css1.css', 'copy_assets:output/assets/css/rst.css', 'copy_assets:output/assets/css/ipython.min.css', 'copy_assets:output/assets/css/rst_base.css', 'copy_assets:output/assets/css/baguetteBox.min.css', 'copy_assets:output/assets/js/html5.js', 'copy_assets:output/assets/js/fancydates.js', 'copy_assets:output/assets/js/gallery.min.js', 'copy_assets:output/assets/js/fancydates.min.js', 'copy_assets:output/assets/js/gallery.js', 'copy_assets:output/assets/js/baguetteBox.min.js', 'copy_assets:output/assets/js/html5shiv-printshiv.min.js', 'copy_assets:output/assets/js/justified-layout.min.js', 'copy_assets:output/assets/js/moment-with-locales.min.js', 'copy_assets:output/assets/xml/atom.xsl', 'copy_assets:output/assets/xml/rss.xsl', 'copy_assets:output/assets/css/code.css', 'render_site', '_scan_locs', '_scan_locs:sitemap', 'sitemap', 'sitemap:output/sitemap.xml', 'sitemap:output/sitemapindex.xml', 'create_bundles', 'create_bundles:output/assets/css/all-nocdn.css', 'create_bundles:output/assets/css/all.css', 'create_bundles:output/assets/js/all-nocdn.js', 'create_bundles:output/assets/js/all.js', 'robots_file', 'robots_file:output/robots.txt', 'post_render']

* Wtf
tasks = generate_tasks(
    'render_site',
    self.nikola.gen_tasks('render_site', "Task", 'Group of tasks to render the site.'))    

def generate_tasks(func_name, gen_result, gen_doc=None):
    """Create tasks from a task generator result.

    @param func_name: (string) name of taskgen function
    @param gen_result: value returned by a task generator function
                       it can be a dict or generator (generating dicts)
    @param gen_doc: (string/None) docstring from the task generator function
    @return: (list - Task)
    """

    
nikola.py
    def gen_tasks(self, name, plugin_category, doc=''):

    
            print(f'task1 {task.name}')
            yield task

            
